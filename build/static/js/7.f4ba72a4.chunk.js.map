{"version":3,"sources":["shared/hooks/useForm.js","shared/components/Button/Button.js","shared/components/TextField/InputAttr.jsx","client/LoginForm/LoginForm.module.scss","client/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js","shared/components/TextField/TextField.module.scss","shared/components/TextField/TextField.jsx","shared/components/Button/Button.module.scss"],"names":["useForm","initialState","onSubmit","useState","data","setData","target","type","name","value","newValue","dataset","radio","prevState","e","preventDefault","types","primary","styles","buttonPrimary","secondary","buttonSecondary","Button","className","text","onClick","variant","selectedClassName","button","defaultProps","inputAttr","placeholder","title","required","email","password","module","exports","LoginForm","dispatch","useDispatch","values","authOperations","logIn","handleChange","handleSubmit","main","form","autoComplete","TextField","onChange","btnBox","regBtn","to","LoginPage","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","label","field","formGroup","htmlFor","formInput"],"mappings":"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","file":"static/js/7.f4ba72a4.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useForm = (initialState, onSubmit) => {\r\n  const [data, setData] = useState(initialState);\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { type, name, value } = target;\r\n    const newValue = type === \"radio\" ? target.dataset.radio : value;\r\n    setData((prevState) => ({ ...prevState, [name]: newValue }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(data);\r\n    setData({ ...initialState });\r\n  };\r\n\r\n  return [data, handleChange, handleSubmit];\r\n};\r\n\r\nexport default useForm;\r\n","import styles from \"./Button.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\nconst types = {\r\n  primary: styles.buttonPrimary,\r\n  secondary: styles.buttonSecondary,\r\n};\r\nconst Button = ({ className, text, onClick, variant, type }) => {\r\n  const selectedClassName = types[variant];\r\n  return (\r\n    <button\r\n      type={type}\r\n      onClick={onClick}\r\n      className={`${styles.button} ${selectedClassName} ${className}`}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\nButton.defaultProps = {\r\n  variant: \"primary\",\r\n  className: \"\",\r\n  type: \"button\",\r\n  onClick: () => {},\r\n};\r\nButton.propTypes = {\r\n  type: PropTypes.oneOf([\"button\", \"reset\", \"submit\"]),\r\n  variant: PropTypes.oneOf([\"primary\", \"secondary\"]),\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  text: PropTypes.string.isRequired,\r\n};\r\n","const inputAttr = {\r\n  name: {\r\n    name: \"username\",\r\n    placeholder: \"Имя\",\r\n    // pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n    title:\r\n      \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n    required: true,\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    placeholder: \"Логин\",\r\n    // pattern: \"[a-zA-Z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*\",\r\n    title: \"Введите email в формате user@example.com, в качестве логина\",\r\n    required: true,\r\n  },\r\n  password: {\r\n    name: \"password\",\r\n    placeholder: \"Пароль\",\r\n    type: \"password\",\r\n    // pattern:\r\n    // \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).+\",\r\n    //   title:\r\n    // \"Введите минимум 8 символов, обязательно должны присутствовать цифры и буквы разного регистра\",\r\n    required: true,\r\n  },\r\n};\r\n\r\nexport default inputAttr;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoginForm_container__3CdV_\",\"visuallyHidden\":\"LoginForm_visuallyHidden__Dwpg-\",\"main\":\"LoginForm_main__33-vl\",\"title\":\"LoginForm_title__qcTzm\",\"btnBox\":\"LoginForm_btnBox__TQdiA\",\"regBtn\":\"LoginForm_regBtn__1USNt\",\"form\":\"LoginForm_form__2uxtK\"};","import { useDispatch } from \"react-redux\";\r\nimport authOperations from \"../../redux/auth/auth-operations\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextField from \"../../shared/components/TextField\";\r\nimport useForm from \"../../shared/hooks/useForm\";\r\nimport Button from \"../../shared/components/Button\";\r\nimport inputAttr from \"../../shared/components/TextField/InputAttr\";\r\nimport styles from \"./LoginForm.module.scss\";\r\n\r\nconst initialState = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\nconst LoginForm = () => {\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (values) => {\r\n    dispatch(authOperations.logIn(values));\r\n  };\r\n  const [data, handleChange, handleSubmit] = useForm(initialState, onSubmit);\r\n\r\n  return (\r\n    <div className={`${styles.main} container`}>\r\n      {/* <div className={styles.container}> */}\r\n      <h1 className={styles.title}>ВХОД</h1>\r\n\r\n      <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\r\n        <TextField\r\n          //   className={styles.input}\r\n          {...inputAttr.email}\r\n          onChange={handleChange}\r\n          name=\"email\"\r\n          required\r\n          placeholder=\"Логин\"\r\n          value={data.email}\r\n        />\r\n        <TextField\r\n          //   className={styles.input}\r\n          {...inputAttr.password}\r\n          onChange={handleChange}\r\n          name=\"password\"\r\n          required\r\n          placeholder=\"Пароль\"\r\n          value={data.password}\r\n        />\r\n        <div className={styles.btnBox}>\r\n          {/* импортировать и заменить кнопки когда сделают компонент */}\r\n          <Button\r\n            className={`${styles.button} ${styles.buttonPrimary} ${styles.regBtn}`}\r\n            text=\"Вход\"\r\n            type=\"submit\"\r\n            variant=\"primary\"\r\n          />\r\n          <Link\r\n            to=\"/registration\"\r\n            //  поменять путь когда создадим объект paths\r\n          >\r\n            {/* <Button\r\n                className={`${styles.button} ${styles.buttonSecondary} ${styles.regBtn}`}\r\n                text=\"Регистрация\"\r\n                type=\"submit\"\r\n                variant=\"secondary\"\r\n              /> */}\r\n          </Link>\r\n        </div>\r\n      </form>\r\n      {/* </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import LoginForm from \"../../client/LoginForm\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n\r\n      <LoginForm />\r\n\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID. If you use Expo, install `expo-random` ' +\n        'and use `nanoid/async`.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TextField_container__3jTzc\",\"visuallyHidden\":\"TextField_visuallyHidden__2HKVH\",\"formInput\":\"TextField_formInput__1n7-G\"};","import { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./TextField.module.scss\";\r\n\r\nconst TextField = ({ label, ...field }) => {\r\n  const id = nanoid();\r\n  if (field.required) {\r\n    field.placeholder += \" *\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.formGroup}>\r\n      {label && <label htmlFor={id}>{label}</label>}\r\n      <input className={styles.formInput} {...field} id={id} />\r\n    </div>\r\n  );\r\n};\r\n\r\nTextField.defaultProps = {\r\n  required: false,\r\n  type: \"text\",\r\n};\r\n\r\nTextField.propTypes = {\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n  type: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  value: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TextField;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Button_container__1xKJd\",\"visuallyHidden\":\"Button_visuallyHidden__2neLE\",\"button\":\"Button_button__3NJm6\",\"buttonPrimary\":\"Button_buttonPrimary__1oM8A\",\"buttonSecondary\":\"Button_buttonSecondary__3_xVy\"};"],"sourceRoot":""}